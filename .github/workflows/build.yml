name: build
on:
  push:
  pull_request:
  workflow_dispatch:

env:
  REPO_NAME: jerasure
  REPO: https://github.com/ktnrg45/jerasure.git
  MSVC_VER: "Visual Studio 17 2022"
  CACHE_KEY: "1.0.0-2"

jobs:
  sdist:
    name: sdist
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Install Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.6
        
    - name: Build sdist
      run: |
        sudo apt update
        sudo apt install libjerasure-dev -y
        pip install wheel cython
        python setup.py build_ext --inplace sdist
        pip uninstall cython -y
        
    - name: Install/Test sdist (no cython)
      run: |
        pip install dist/*.tar.gz
        pip install pytest
        pytest tests
        
    - name: Upload Artifact
      uses: actions/upload-artifact@v3
      with:
        name: dist
        path: dist/

  test-linux:
    name: " Linux py-${{ matrix.config.python }} ${{matrix.config.os}}"
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
          - {os: ubuntu-latest, python: "3.6"}
          - {os: ubuntu-latest, python: "3.10"}
          
    steps:
    - uses: actions/checkout@v3
      name: Checkout

    - name: Python ${{ matrix.config.python }}
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.config.python }}
        
    - name: Install Dependencies
      run: |
        sudo apt update
        sudo apt install libjerasure-dev -y
        
    - name: Build
      run: |
        pip install cython wheel pytest
        python setup.py bdist_wheel
        pip uninstall cython -y
        pip install dist/*.whl
    
    - name: Test
      run: |
        pytest tests
  
  build-deps-windows:
    name: "Build Dependencies Windows ${{ matrix.config.arch }} ${{matrix.config.os}}"
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
          - {os: windows-latest, arch: win32}
          - {os: windows-latest, arch: x64}

    steps:
      - name: Cache Headers
        id: cache-headers
        uses: actions/cache@v3
        with:
          path: Include
          key: "Include-${{ env.CACHE_KEY }}"
          
      - name: Cache Libs
        id: cache-libs
        uses: actions/cache@v3
        with:
          path: libs
          key: "libs-${{ matrix.config.arch }}-${{ env.CACHE_KEY }}"

      - name: Cache Headers
        if: steps.cache-headers.outputs.cache-hit != 'true'
        run: |
          git clone --recurse-submodules ${{ env.REPO }}
          mkdir Include
          cp jerasure/include/*.h Include
          cp jerasure/gf-complete/include/*.h Include

      - name: Build Dependencies
        if: steps.cache-libs.outputs.cache-hit != 'true'
        run: |
          git clone --recurse-submodules ${{ env.REPO }}
          cd ${{ env.REPO_NAME }}
          mkdir build
          cd build
          cmake.exe -G "${{ env.MSVC_VER }}" -A ${{ matrix.config.arch }} ..
          cmake.exe --build . --config Release
          cd ../../
          mkdir libs
          cp jerasure/build/Release/*.lib libs
          cp jerasure/build/gf-complete/Release/*.lib libs


  test-windows:
    name: "Test Windows ${{matrix.config.arch}} py-${{ matrix.config.python }} ${{matrix.config.os}}"
    needs: [build-deps-windows]
    if: startsWith(github.ref, 'refs/tags') != true
    runs-on: ${{ matrix.config.os }}
    strategy:
      matrix:
        config:
          - {os: windows-latest, python: "3.6", arch: x64, py-arch: x64}
          - {os: windows-latest, python: "3.10", arch: x64, py-arch: x64}
    steps:
      - uses: actions/checkout@v3
        name: Checkout

      - name: Cache Headers
        id: cache-headers
        uses: actions/cache@v3
        with:
          path: Include
          key: "Include-${{ env.CACHE_KEY }}"
          
      - name: Cache Libs
        id: cache-libs
        uses: actions/cache@v3
        with:
          path: libs
          key: "libs-${{ matrix.config.arch }}-${{ env.CACHE_KEY}}"

      - name: Retrieve Headers
        if: steps.cache-headers.outputs.cache-hit != 'true'
        run: exit 1
          
      - name: Retrieve Libs
        if: steps.cache-libs.outputs.cache-hit != 'true'
        run: exit 1

      - name: Install Python
        uses: actions/setup-python@v2
        with:
          architecture: ${{ matrix.config.py-arch }}
          python-version: ${{ matrix.config.python }}

      - name: Build
        run: |
          pip install Cython wheel pytest
          python setup.py bdist_wheel
          pip uninstall cython -y
          pip install $(ls dist)
          
      - name: Test
        run: |
          pytest tests

  build-windows:
    name: "Build Windows ${{matrix.config.arch}} py-${{ matrix.config.python }} ${{matrix.config.os}}"
    if: startsWith(github.ref, 'refs/tags')
    needs: [build-deps-windows]
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
          - {os: windows-latest, python: "3.6", arch: win32, py-arch: x86}
          - {os: windows-latest, python: "3.7", arch: win32, py-arch: x86}
          - {os: windows-latest, python: "3.8", arch: win32, py-arch: x86}
          - {os: windows-latest, python: "3.9", arch: win32, py-arch: x86}
          - {os: windows-latest, python: "3.10", arch: win32, py-arch: x86}
          - {os: windows-latest, python: "3.6", arch: x64, py-arch: x64}
          - {os: windows-latest, python: "3.7", arch: x64, py-arch: x64}
          - {os: windows-latest, python: "3.8", arch: x64, py-arch: x64}
          - {os: windows-latest, python: "3.9", arch: x64, py-arch: x64}
          - {os: windows-latest, python: "3.10", arch: x64, py-arch: x64}

    steps:
      - uses: actions/checkout@v3
        name: Checkout

      - name: Cache Headers
        id: cache-headers
        uses: actions/cache@v3
        with:
          path: Include
          key: "Include-${{ env.CACHE_KEY }}"
          
      - name: Cache Libs
        id: cache-libs
        uses: actions/cache@v3
        with:
          path: libs
          key: "libs-${{ matrix.config.arch }}-${{ env.CACHE_KEY}}"

      - name: Retrieve Headers
        if: steps.cache-headers.outputs.cache-hit != 'true'
        run: exit 1
          
      - name: Retrieve Libs
        if: steps.cache-libs.outputs.cache-hit != 'true'
        run: exit 1

      - name: Install Python
        uses: actions/setup-python@v2
        with:
          architecture: ${{ matrix.config.py-arch }}
          python-version: ${{ matrix.config.python }}

      - name: Build
        run: |
          pip install Cython wheel pytest
          python setup.py bdist_wheel
          pip uninstall cython -y
          pip install $(ls dist)
          
      - name: Test
        run: |
          pytest tests

      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: dist
          path: dist/
          
  cibuildwheel:
    name: Build wheels on ${{ matrix.os }}  ${{ matrix.arch }}
    if: startsWith(github.ref, 'refs/tags')
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            arch: aarch64
          - os: ubuntu-latest
            arch: i686
          - os: ubuntu-latest
            arch: x86_64
#           - os: macos-latest
#             arch: arm64
#           - os: macos-latest
#             arch: x86_64
#           - os: windows-latest
#             arch: AMD64
#           - os: windows-latest
#             arch: x86

    env:
      CIBW_MANYLINUX_X86_64_IMAGE: manylinux_2_24
      CIBW_MANYLINUX_I686_IMAGE: manylinux_2_24
      CIBW_MANYLINUX_PYPY_X86_64_IMAGE: manylinux_2_24
      CIBW_MANYLINUX_AARCH64_IMAGE: manylinux_2_24
      CIBW_MANYLINUX_PPC64LE_IMAGE: manylinux_2_24
      CIBW_MANYLINUX_S390X_IMAGE: manylinux_2_24
      CIBW_ARCHS: ${{ matrix.arch }}
      CIBW_BEFORE_BUILD: pip install cython
      CIBW_BEFORE_ALL_LINUX: script/cibuild.sh
      CIBW_SKIP: pp* *-musllinux*
      CIBW_TEST_REQUIRES: pytest
      CIBW_TEST_COMMAND: pytest {project}/tests
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up QEMU
        if: matrix.os == 'ubuntu-latest'
        uses: docker/setup-qemu-action@v1
        
#       - name: Cache Headers
#         if: matrix.os == 'windows-latest'
#         id: cache-headers
#         uses: actions/cache@v3
#         with:
#           path: Include
#           key: "Include-${{ env.CACHE_KEY }}"
          
#       - name: Cache Libs
#         if: matrix.os == 'windows-latest'
#         id: cache-libs
#         uses: actions/cache@v3
#         with:
#           path: libs
#           key: "libs-${{ matrix.config.arch }}-${{ env.CACHE_KEY}}"

#       - name: Retrieve Headers
#         if: matrix.os == 'windows-latest' && steps.cache-headers.outputs.cache-hit != 'true'
#         run: exit 1
          
#       - name: Retrieve Libs
#         if: matrix.os == 'windows-latest' && steps.cache-libs.outputs.cache-hit != 'true'
#         run: exit 1

      - name: Setup Python
        uses: actions/setup-python@v2

      - name: Install cibuildwheel
        run: |
          python -m pip install cibuildwheel
      - name: Build wheels
        run: python -m cibuildwheel --output-dir dist
        
      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: dist
          path: dist/

  publish:
    runs-on: ubuntu-latest
    needs: [sdist, cibuildwheel, test-windows, test-linux]
    steps:
      - name: Download Wheels
        uses: actions/download-artifact@v3
        with:
          name: dist
          path: dist/
      - name: Publish
        if: startsWith(github.ref, 'refs/tags')
        uses: pypa/gh-action-pypi-publish@master
        with:
          user: __token__
          password: ${{ secrets.PYPI_PASSWORD }}
          skip_existing: true

#   manylinux:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout
#         uses: actions/checkout@v3

#       - name: AuditWheel
#         uses: RalfG/python-wheels-manylinux-build@v0.4.2-manylinux_2_24_x86_64
#         with:
#           system-packages: 'libjerasure-dev'
#           build-requirements: 'cython'

#       - name: Upload Artifacts
#         uses: actions/upload-artifact@v3
#         with:
#           name: dist
#           path: dist/*-manylinux*.whl
