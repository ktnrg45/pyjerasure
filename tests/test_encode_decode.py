"""Test encode and decode."""

from pyjerasure import (
    Matrix,
    decode_from_bytes,
    encode_from_bytes,
    decode_from_blocks,
    encode_from_blocks,
)


CAUCHY = {
    "type": "cauchy",
    "k": 4,
    "m": 1,
    "w": 16,
    "size": 480,
    "erasures": [1],
    "data": [
        b'\x82c\xe1\xda\x010\x07\x7f\xea\xee\x19\x96H\xc7\xb2+\xca\xf4\xb5\xb9it\xce\x1eA\xab\xafp\xf43\x92\x1c\x06\xc7/5\xd3\x8feG-\x87\xe8;\xec\x95\xe8\x82\xc9d\xa5\x12\xf6?\x7f\xc9\x15\xda:\x8e\xc1\x93\xa3Qz\x05\x05[\xcb\x90\xa7l\x0cn\xa2\xa4Eo?\x02\xe4/lU\xdb%\xb3vq\xdd\xef^\xec\xcc0N\x9a\x8a\xef\xdd\xc2\x12\xfbK\xe7\xa9\xc0\x06\xb1/\x91\x03\xb5\xf8\x022|\xce\x113\x8f\x026\xf0\x9d2B\x9f\xbc\x02\xd3XL\xd7\xe7\xa8@]\x0b\xc7\xec\xc67<B\x8f5\x0e\xce\xe7\x9a\x870\xc3x\xd4s\xecy\x93\xb8\xfcF]\xf5\xd2\xe9pTa\xady\x1d6\x11\x98\x8e\xee?6\x8bt\xe8=Nm0\xb2]\xb0\xf5\x85;:a\x9b\x00\x81\xea\x92\t\x13w\x9b6Z\xf2\xbbQ\xe0e\xf7\xea\xd7\xfe\xfe\xff\xa1N\x87\x91\x88:F\x9c\xbdd\x81\xfe\x9d\xc2\xbe\xea\xaf\x91\x1b\xdc\xa0MjG\x15\xe5G\xc4\x10l\xe6\xd8\xb7\xe9\x1c\xc9\xf2\xf0\xe7A\xbe\xd1_w/\xd7\x99K\xd8\xd0\xc5B\xf1\xe0\xba\xb5\xf6\xd4\x04\xbbJ\x06p\x05\xb6\xa9\xcf\xbe\x03\xccC\xb0\x89b\x19PF\xd8a\xd7\xadU\x16\x04\x82V1\t\xf7)\xf8\xaf\xa0\xdc\xb5\xdeyu\xb4{\x03t\xd6\xb8\xdc<\x7f\xb0\xc2\x06\xe76te\x8dc\xce\xeb\x04\xb5\x97\xb5H\x96\x8c\xf8\xb5;\xf8!\xfc\xa3\x89\xc0%H\x0e\xd1r\xe4\xd5\xf1J\xe8nj\x8c\x9f\xd1g\xda&\xa0\x17P\r\x89\xe4\xa7W\xdfb\x8cc\xcb\xde6\xcf\xc0\x1b\'\x9e\xc2\xb2g?\x19\x9fj\xdf"\x88L\x1e\xb2\xab\x16\xe5\xb8"`=+J`(c\x1e\x0c<Fjbh\xc3o\xef\x0c\xcf\xf4\xf1j2\xfa\x95?\xed\xff\x7fE\x17\x13[\x95jH\x83\xea^X\xb2\x84\xa5~\xef\x0b\x14\xa8\xa3\xd2_\x8b9\xed\xc6w\xb5\x0f\xf0\xfb\x05\xc9\xb3\x86\xf1\xd4\xe3q\xb4\xcb14\xc7',
        b"K[\xa0\xbeld\rg%\x1e\x01\xda\x07\xc6\xcbJ\x01\x13\xe9\xfb\x0f\xcf\xb3s\xf1\xc4l$\xa5\x1d\xae\x95\xcd\xe6&\x0f6Sc\xc3\xca\xc8a\x10h)\xfd\x1a\x8dr\x06\xb1\r\\K\xe2\x1a\xa7>L\xc0;nM\xf15\x85\xb6U,\x8eE\x05+4r6A\xb8\x81$\x10\xef\x97\xf4\xb6\xae|qN\xf97r\xa4\xab\xd1\xff\x80\xcd\xb9\x85\xe5\x9d!\xc3\xe4\xad\xe3\xc8\x99\xbb%\x1b\xf4r=\x89R\x9cFC\x01L\xf8-\x9c\x9c\xb96\xfa\xe8_\xb8\x1f\xd5\x13\xda\xac\xde\x05\xf4\xec#\xe9\x8a\xa8\x05\x1d\\R\xda\x7f\x9d\xecZ\xaa\xe012K\x15\x18D\x08\x7f\xd0\xe5\xb7\x10\xeb\xf8\xcd\x97\x8c\xa2\xd8\xd8\xbbV\xc6fT\xf4\xcb\xe3\xd8,\x8a`\x81I\x8c\xd8a\xacG\x1b4\x8d\x9b\xcb\xa6\xbf\xc28t\xfa\x93\xbd\xd1\x03\x82jO\x0fk\xadn\xc4Z\x06x\xd6\x82\xb8\x89N\xfcG\xcc\xa0$J\x80tQ;\xda\xdd\xed\x14\xe0\x02\xc2_\xb8\xd2S9\xc1\xda\xe6\x17\xd8.g\xda\t\x9a16\xed(\xd8\xe0\xfcN\xcfa|\x13O\xda\x95\xa4\xc8\xcc\x809s\x0e\x88Z\x19(\xbeG\xf6I\xeaA\xd5\xb6\xfe\xe9\xd1k\x99\xde\x9e\x96\xee\xe8j\x1e\xc0==\x9c\xe5A\xb1\xa5\xd1>\x8eb7;\x07\xcb'\xcbtg&L\xa5\x0e+s\xc9QX\xb1\x18\xcfDs\x8b\x10Q\xd2S\xd1\xef\xbeC\xdcC\xce\xc21\xe4Y$$)\xdex\x0b\xa872\xe3v\x99bc\x01\xb2\xf2\xf6\xe1\x04\xd7 \x07\r\xc5\\\xa2\xff8C$\xbb\xb3\xec\x02t\xb0\x88\xf9\x89\xc9\xae\x99\xcc-&\x03o\xa2\xc5\xad\x7f\x8c\xe5y\xd5\x86\xd1Ift\x8c\xa8L\x11\xae\xe3\xc8\xcdy\xc8\xe4\x90]p\x08O\xdf <\x9f#\xde\xdc\xf2u\x0c@\xd5\xad\xe4%RO\xc6\xb5%g\xcbR\\P\xc5\xa4\x860\x18P_\xc1V\x98\xe4\xc6\n\x90o\x9f{\xef\xe0\r\x86h)",
        b'\xf5\x00\xda\xc0\xc4\xce\xb7\xba\x87\xe4\xf2\x93Fk\xef\x7fW2\xb0a\x03\xd9\x035\x9b\xb5\xa0\x13\x7fQK\x89\x9c&H5BFk\xe0\x101%S\xeew_\x02f\x8f\xf2\xde\x12\x12\xc1t\x87\x19%\xe2\xc0\xd9\x00u\xe3\xeb\xa3\x99\xea\x86\xec\xc5\xdb\xfe\x88n\xbe\xc06bB\xbf\xc9\xd7\xb1\xca\xd3\xda\x85\x8elt/\x7fZr*,\xe6a\x18]\xa3\xb1\x9a}a\xf4\xbdp\xe6N\x9f\x16\xa8\xd3\x15N\x11vS\xcc\xa6\xe1\xa2\xecvD\xfb\xd5\xd4\x01\xe5\xbe_\x07\x13\xff\xa6\x93\xa4s\x8f+\x90\x1f\xe4\xfd\xd1w\x99\x9b\xb9\x1bF\xd7p\xcf\x19U\xd9\xb1\xf0\xcbq*_o\xf9\x1a\x80\xd6\xad\x1a\xdf\xcbi`\xe2Q^p\x95\xa9\x08\xa8\x05\x1a\x12\xf1\xccV\x95o0\xd8[\xe2\xb40\xe9\x81Z\x1f\x83\x1a\xb1m\xe7\xac\x93\xb3\x1b\xe5x\x16T\xa6\xde\x16\xa1\xd7\xff\x1a8\xcbN\xf8\xc5;\xb0\x0cY\x8aM\xdeA\r^\xf7Q.\x91\xe2b\x8b\xe75Jk\xba\xa0\xe3\x86\x9f\xf6\xbcB\xd5\xf9\xa5\xea\x96\xba\n\x8d.n\xf0\xa2[y1\xdf\x9b\xcf\x19\xa9\xe8\xed\xf3G\xc4)K\xb6\xc0\xedE\x0c\xde]:n\x8e\xac8\x83\xdbI\x8e\x1a9S\x1e\x8d\xc3[\x16\x99d\x16\x19p\xf9y$\xfe7O\xe5{\xdcR\x9c\xad\x96_\xb5P\xd4\xcf\x04\xcb\xef9\x1e\xd1\xaa\x1f\x86\x0b\xf1iY]\x16\x8e*C\xbd\xde.\x84\xf3N2IOT\xa3\x08\xc1\x1dJ\xf5\xd6\x9a\x02\xd5\xc2\xd7\x15a\xe3O\xcd\x15\xad\xc8E\xfd\x9a\x1c\x03\xf2\x1f\xcd"\xb2.)\x85\xf17RN\x12set\x19\xe2\x9f\x15\xcf\xa4\x9077\x9f*\xa5\xe9\xfd\xc6a@k\x0e\x0em\xbf\xa9\xa9\xdb\x14\x01\xfb\xf0\x8b\x02\xb8\x9c\x16\xccNlR\x8e\x9a\x89\xb9\xbb\xe9\x93\xef"\xb4\xc8\xb9\xa5L\x01R\xa1llq\xbf\x99\xf6\xba\x91\xbcR\xff#\xf3!\x04\x97\x00\xa9k\x11\xa9;\x99X',
        b"0{\xd9\"\x06K\xd8\xd5<b\xbb\xe0N\r\x1d_\xaf\xc8\x17&\x83!\xd2\x88\xd0\x11%\xc0\xdc\x91\xf5\xc1a\xf0\x7f\xef\xa4\x88\xe65\x03r\x05\xc5\x85v\x96O\x18><\x96\x94\xbb\x17g\xef\x84\xd1\x81M\x8a\n\xd7\x1d\xb2!)\x8d\xbd/\xf29\xd2\xf2;\xfb\n\xcb\xb9\"\xff\x06;\x11\x9c\x80o\xc8O\xfb\x0ew\xc7mY[f\x85\xb5\xe5\xb0.\x0b\xe7\xe7n\xd9\xe8\x0eF\x1by\xecK\xe8\x88\x9d\xc1\xb0\x81\x83\x8e\x89\x8ff\x7f\x930\xeb\xcd\xb1^m\x02%\xbb\xf3\x0b\xbc\x1d\x88\xfe\xdb\x94\x88P\xacY\xe5\xa2\x17y\x12\x00'~8\xc7Gb\x81\xbepW\\aJ\xb6\xf7Mv\xa6\xfe4\x80\xb4\xe6\x97h\xf21=\xb8T\xe2\x02\xc70\x16\xef\xb0^\xd3\xafn/`\xb0\xd0\\P\x18(z\xe8\xaa\xe0\xc5\xfdx\xd8\x065\x15B\x8c\xd1\xe3\xcap:\\\xf7=UA\xa1\x1cC\xa5;\x9b\x92\x05\xc3&\xb1\xff\xda\xbd\xa6w\x8f\xa2!\xcb\xff\xc5\xf3\xfc\xe2\xf8a7\x9a\xe2\xac\x8fU\x03\x0e<\xc0\x90\x1b\xc4F\x11$\xe5\xeeKi\xb2\xfb\xe0\xf8\x86FS\x8c\xa2{\x08\xa6\xde\xbd\xcd\xa1\t\x17\xc5\xb8wO\x01N\x13\x19u\xb3F\x9a\xf0T\x11\x93~z\xdf03\xe0\x17\xe3D\xcc_\xc1\x1a\xaa\xd8i\x8c\x1a,\xc3\xfa\xeb\xc8\xecf\xad\x19\x81\xfdHl\xb2\xb7\x9fi\xd0\xb8\x97\x7fw\x01l\xc3'\xa7!<\xf3\xf8\xb5Cp\x0c\x08 (\xbd\x0fB\xe2\xc2\xe0\xe3\xdc\xab'\xeb\xf9\xc1VuiN#>_P\xfe\xfb&t\x1bc\x930\x0e\xdc\xd2RT\xea;\xd8:\x86 \"\xce\xc1+\xc1/\xa0\xb18G!m\xc9\xdf\x02\x12\x8c}\x01\x9e`\x81\x17\x83\x1bi;\x0e\xf3\x93\x0b;\xcd\xbe}--\xacT$\x9fDNW\xe5}\xb56\xdeHY^70'\xbb\x9c\xef\xe4)U\x93\x84\xde\xa0\x02H\x87\r}8Y\xee\x05\xb8\x9c",
        b'\xbd\xd8O\xf1O\xddfh\x0f-g\x8e\xda\x81\xb7w\xab\x12S!qo"\x16\xc1)\x0e`\x81\xa1\xff"\xf7!Y^\xa6Itt:\xab\x81\x87\xa4}\xbfm\xd7P\xfe\xd5\x1e\xb9\xde\xb1%\x14L\xea\x0c\xd8*\x16_\xdel9&\x90\xb4\x85\xb2\xae\xc0\xce\x08Ix\xf9\xfc\n\x1d]\xcd\xd3\xb5\x1a\xc4\xeb\x8e\xa6\xef\xc1\x8aZ\x92\x04\xc8\xc8\xca\xcc\x9f6\x0e\x05\x92\x12}\xbf\xc6\xdd(\x003\x1cU\x82\x9e-\xfd"\x14y\xb1\xf2zo\xc2\t\xe6g\x98\xd1\x81Z\xc9\xd6\x86\xdf\np%\x97\xab\x03\x03\x07\xfe\x16\x14\xb3\x8c\x0c\xae5\xb0\xc7\x1d \xa4O\xe7{\x0e\x88\xb4X\x9aXE\x83dF\xf8\x92\xe8\xaa\x94\xcb\x0b\xf5i\xddW\xd6\x19\xb7\x96U\xa9\x11v\x93\x0e\xaf1\xe1is S\xe4\x82\xb0\xdb\xb6\x96\xa1\x97\xf7\x96\xeb\xd9/b\xfa\xb8%!h\x07*\xc3\xe0f\xd7\xbc\xa5\x85\x15\x9a\xa5\x06\xd6\x85N\x15\xd1\xb4\xd3jM\xef\xa4\xcd(\xa7q\x89T\xc7\x18s\x9d\xe4\xfc\xd77\xb1\xf4\xb7G\\\xd9\xdb%f\xdd\x13\x1b\xca\xe7\xa8\x1fc\xeb\xa3c\x03E\xa8UM\xe8\xe8\xd8L\xdfd\xb1\xf6\xd2\x0e\x8c\xb2\x08\xc8\xcc\xd3\x16\xec\xa1\x9b0\xf9\xc9@\xf0\xc3\x90 \xf0\xca\x03W>\x8eT\x13\x81<\x9e\xe6\xa8\xcb\x19\xb0 \x13\xa7\x1f\xee\x8f\xab\x8b\xe5\xac\rSs\xc1Z\xb3\xf6\xe6(\x0e\xacA>C$\xc4f\xee\xe6\xd4I\x1dsG:\xec<\x0e\xf0UY\xd43\xe7\xed\x94\xbf\x8c\xcb\t \xf7XN\xe1\xc6\x87\xc4\x8a\xff+\xab\xb1\xb7\xf46\x04\x83#\xfd\xb9\x0f\xeeE\xe3:\x85h\x8a\xe8\xd0J\xc1n\x91v0SP\xd6\x90\xe3&\x89`\xf5\nJ\xb4-U|r\x04\xc3a\xaa\xce\xdf7\x12o)\x8b\x93y\xc2p\xc5`M*e\'Kc\xde6QQ\xc4\x8ae\xa30\xe0,\x8a\xba\xaeS\xa9`\x95Z\xe2m\xa5(\x95 3',
    ],
}

RS_R6 = {
    "type": "rs_r6",
    "k": 4,
    "m": 2,
    "w": 8,
    "size": 8,
    "erasures": [1, 3],
    "data": [
        b"\x82\x01\xeaH\xcaiA\xf4",
        b"\x06\xd3-\xec\xc9\xf6\x15\xc1",
        b"z\xcb\x0cE\xe4\xdbq\xec",
        b"\x9a\xc2\xe7\xb1\xb5|\x8f\x9d",
        b"d\xdb,PR8\xaaD",
        b"\xdf\xef\xebe3\x14\xbe`",
    ],
}

RS_VANDERMONDE = {
    "type": "rs_vandermonde",
    "k": 4,
    "m": 1,
    "w": 8,
    "size": 8,
    "erasures": [2],
    "data": [
        b"\x82\x01\xeaH\xcaiA\xf4",
        b"\x06\xd3-\xec\xc9\xf6\x15\xc1",
        b"z\xcb\x0cE\xe4\xdbq\xec",
        b"\x9a\xc2\xe7\xb1\xb5|\x8f\x9d",
        b"d\xdb,PR8\xaaD",
    ],
}

LIBERATION = {
    "type": "liberation",
    "k": 4,
    "m": 2,
    "w": 5,
    "size": 40,
    "packetsize": 8,
    "erasures": [2, 3],
    "data": [
        b"\x82c\xe1\xda\x010\x07\x7f\xea\xee\x19\x96H\xc7\xb2+\xca\xf4\xb5\xb9it\xce\x1eA\xab\xafp\xf43\x92\x1c\x06\xc7/5\xd3\x8feG",
        b"-\x87\xe8;\xec\x95\xe8\x82\xc9d\xa5\x12\xf6?\x7f\xc9\x15\xda:\x8e\xc1\x93\xa3Qz\x05\x05[\xcb\x90\xa7l\x0cn\xa2\xa4Eo?\x02",
        b"\xe4/lU\xdb%\xb3vq\xdd\xef^\xec\xcc0N\x9a\x8a\xef\xdd\xc2\x12\xfbK\xe7\xa9\xc0\x06\xb1/\x91\x03\xb5\xf8\x022|\xce\x113",
        b"\x8f\x026\xf0\x9d2B\x9f\xbc\x02\xd3XL\xd7\xe7\xa8@]\x0b\xc7\xec\xc67<B\x8f5\x0e\xce\xe7\x9a\x870\xc3x\xd4s\xecy\x93",
        b"\xc4\xc9SD\xab\xb2\x1e\x14\xeeU\x80\x82\x1e\xe3\x1a\x04\x05\xf9k-\x863\xa18\x9e\x88_#@k>\xf4\x8f\x92\xf7w\x99\xc22\xe5",
        b"\x93\x02\x9e\x1b\xfb\xfa\x19zj\xd1\xae\xc4\x85pcm\x9f\xd1\xbe\xae\x82\x8b\x99\x8f\x15\xe8\xb2\xd9&\xae\xf9\xc0\xfe\xefO\xc2\xe459\xc1",
    ],
}


def _test_decode(case):
    erasures = case["erasures"]
    erased = []
    original = []
    matrix = Matrix(case["type"], case["k"], case["m"], case["w"])
    packetsize = 0 if not case.get("packetsize") else case.get("packetsize")

    size = matrix.align_size(case["size"], packetsize)
    for index, item in enumerate(case["data"]):
        block = matrix.align_block(item, case["size"], packetsize)
        if index < case["k"]:
            original.append(block)
        if index in erasures:
            erased.append(bytes(size))
            continue
        erased.append(block)
    data = b"".join(erased)
    original = b"".join(original)
    assert data != original
    result = decode_from_bytes(
        matrix, data, erasures, size, packetsize=packetsize, data_only=True
    )
    assert original == result

    result_blocks = decode_from_blocks(
        matrix, case["data"], erasures, packetsize, data_only=True
    )
    assert original == b"".join(result_blocks)


def _test_encode(case):
    encoded = []
    data = []
    matrix = Matrix(case["type"], case["k"], case["m"], case["w"])
    packetsize = 0 if not case.get("packetsize") else case.get("packetsize")
    size = matrix.align_size(case["size"], packetsize)
    for index, item in enumerate(case["data"]):
        block = matrix.align_block(item, case["size"], packetsize)
        encoded.append(block)
        if index < case["k"]:
            data.append(block)
    encoded = b"".join(encoded)
    data = b"".join(data)
    assert data != encoded
    result = encode_from_bytes(matrix, data, size, packetsize=packetsize)
    assert encoded == result

    result_blocks = encode_from_blocks(matrix, case["data"], packetsize)
    assert encoded == b"".join(result_blocks)


def test_cauchy_decode():
    """Test Cauchy decode."""
    _test_decode(CAUCHY)


def test_reed_sol_r6_decode():
    """Test Reed Sol R6 decode."""
    _test_decode(RS_R6)


def test_reed_sol_vandermonde_decode():
    """Test Reed Sol Vandermonde decode."""
    _test_decode(RS_VANDERMONDE)


def test_liberation_decode():
    """Test Liberation decode."""
    _test_decode(LIBERATION)


def test_cauchy_encode():
    """Test Cauchy encode."""
    _test_encode(CAUCHY)


def test_reed_sol_r6_encode():
    """Test Reed Sol R6 encode."""
    _test_encode(RS_R6)


def test_reed_sol_vandermonde_encode():
    """Test Reed Sol Vandermonde encode."""
    _test_encode(RS_VANDERMONDE)


def test_liberation_encode():
    """Test Liberation encode."""
    _test_encode(LIBERATION)
